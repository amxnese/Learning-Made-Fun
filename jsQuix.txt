LEVEL1:
JavaScript Quiz: Basic Concepts
Question 1: Practical
What will the following JavaScript code output to the console?

console.log(typeof "Hello, world!");
a) string
b) text
c) String

Answer: a) string

Question 2: Theoretical
Which of the following is not a primitive data type in JavaScript?

a) String
b) undefined
c) Array

Answer: c) Array

Question 3: Practical
What is the result of the following operation?

let result = 10 + 5 * 2;
console.log(result);
a) 30
b) 20
c) 25

Answer: b) 20

Question 4: Practical
Which operator is used for string concatenation in JavaScript?

a) +
b) &
c) .

Answer: a) +

Question 5: Practical
What does the following code snippet display?

let x = "5";
let y = "10";
console.log(x + y);
a) 15
b) "510"
c) "15"

Answer: b) "510"

Question 6: Theoretical
What is the purpose of the null data type in JavaScript?

a) To denote a nonexistent or invalid value.
b) To declare variables that will store text.
c) To perform complex arithmetic operations.

Answer: a) To denote a nonexistent or invalid value.

Question 7: Practical
What will be the output of the following JavaScript code?


let value = 10;
console.log(value += 5);
a) 10
b) 15
c) 5

Answer: b) 15

Question 8: Practical
Consider the following JavaScript code. What is its output?


let num = 20;
let check = num % 2 === 0 ? "Even" : "Odd";
console.log(check);
a) Even
b) Odd
c) 20

Answer: a) Even

Question 9: Practical
What does this code output?


console.log(typeof null);
a) null
b) object
c) undefined

Answer: b) object

Question 10: Theoretical
Why do we use variables in JavaScript?

a) To store data values that can change over time.
b) To perform operations without storing data.
c) To increase the processing speed of scripts.

Answer: a) To store data values that can change over time.



LEVEL2:
JavaScript Quiz: Built-in Functions
Question 1: Practical
What will the following JavaScript code output to the console?


console.log(document.getElementById === document.querySelector);
a) true
b) false
c) undefined

Answer: b) false

Question 2: Theoretical
Why are built-in functions important in JavaScript?

a) They allow for direct modification of HTML and CSS via JavaScript.
b) They provide ready-made functions that help in performing common tasks, thus enhancing code efficiency and simplicity.
c) They are the only way to interact with web pages.

Answer: b) They provide ready-made functions that help in performing common tasks, thus enhancing code efficiency and simplicity.

Question 3: Practical
Which function is used to create a new HTML element in JavaScript?


document.createElement('div');
a) document.getElementById
b) document.querySelector
c) document.createElement

Answer: c) document.createElement

Question 4: Practical
What does the following code snippet do?


setTimeout(function() {
    alert("Hello!");
}, 3000);
a) Displays an alert box with "Hello!" immediately.
b) Displays an alert box with "Hello!" after 3 seconds.
c) Repeats an alert every 3 seconds.

Answer: b) Displays an alert box with "Hello!" after 3 seconds.

Question 5: Practical
What is the purpose of addEventListener in JavaScript?


document.getElementById("myButton").addEventListener("click", function() {
    console.log("Button clicked!");
});
a) It outputs "Button clicked!" to the console whenever a button is clicked.
b) It creates a new button element.
c) It checks if the button is clicked.

Answer: a) It outputs "Button clicked!" to the console whenever a button is clicked.

Question 6: Theoretical
Which built-in function is used to execute a block of code repeatedly at specific time intervals in JavaScript?
a) setTimeout
b) setInterval
c) addEventListener

Answer: b) setInterval

Question 7: Practical
How can you select an element by its CSS selector in JavaScript?


a) document.getElementById('.my-class')
b) document.querySelector('.my-class')
c) document.getElementsByClassName('my-class')

Answer: b) document.querySelector('.my-class')

Question 8: Theoretical
What is the primary use of console.log in JavaScript?

a) To write information to the console as a debugging aid.
b) To display user alerts in the web browser.
c) To read data from the web server asynchronously.

Answer: a) To write information to the console as a debugging aid.

Question 9: Practical
What will happen if you use document.getElementById("nonexistent-id")?

a) It will create a new element with the id "nonexistent-id".
b) It will return null.
c) It will throw a syntax error.

Answer: b) It will return null.

Question 10: Practical
Which method is used to apply a CSS selector and return the first element that matches this selector?


let elem = document.querySelector("#myId");
a) document.getElementByTagName
b) document.querySelector
c) document.getElementById

Answer: b) document.querySelector



LEVEL3:
JavaScript Quiz: Built-in Data Structures
Question 1: Practical
What does the following JavaScript array method do?


let numbers = [1, 2, 3];
numbers.push(4);
console.log(numbers);
a) [1, 2, 3]
b) [1, 2, 3, 4]
c) [4, 1, 2, 3]

Answer: b) [1, 2, 3, 4]

Question 2: Theoretical
Why are built-in data structures such as Arrays and Objects crucial in JavaScript?

a) They allow for the storage and manipulation of data collections efficiently.
b) They provide methods to directly manipulate HTML and CSS.
c) They speed up the browserâ€™s rendering process.

Answer: a) They allow for the storage and manipulation of data collections efficiently.

Question 3: Practical
What will the following code output?


let fruits = new Set(["apple", "banana", "cherry"]);
fruits.add("mango");
console.log(fruits.has("banana"));
a) true
b) false
c) undefined

Answer: a) true

Question 4: Practical
How do you retrieve all the keys from the following JavaScript object?


let person = { name: "John", age: 30 };
console.log(Object.keys(person));
a) ["John", 30]
b) ["name", "age"]
c) ["person"]

Answer: b) ["name", "age"]

Question 5: Practical
Consider the following JavaScript Map. What is the correct way to add a new key-value pair?


let map = new Map();
map.set('a', 1);
map.set('b', 2);
a) map.put('c', 3);
b) map.add('c', 3);
c) map.set('c', 3);

Answer: c) map.set('c', 3);

Question 6: Theoretical
What advantage does a JavaScript Set have over an Array?

a) It can store multiple references to the same object.
b) It automatically removes duplicate values.
c) It allows for numeric indexing of its elements.

Answer: b) It automatically removes duplicate values.

Question 7: Practical
Which method would you use to sort an array of numbers in ascending order?


let numbers = [4, 1, 3, 2];
numbers.sort();
console.log(numbers);
a) numbers.sort((a, b) => a - b);
b) numbers.sort();
c) numbers.order();

Answer: a) The correct method is numbers.sort((a, b) => a - b); but the example shown in the code is incorrect as it uses numbers.sort() which sorts lexicographically. Hence, the correct full method would be a.

Question 8: Practical
What does the Object.assign method accomplish in this code snippet?


let obj1 = { a: 1 };
let obj2 = { b: 2 };
let combined = Object.assign(obj1, obj2);
console.log(combined);
a) { a: 1, b: 2 }
b) { b: 2 }
c) { a: 1 }

Answer: a) { a: 1, b: 2 }

Question 9: Practical
How do you remove an item from a set in JavaScript?


let mySet = new Set();
mySet.add("hello");
mySet.delete("hello");
console.log(mySet.has("hello"));
a) true
b) false
c) undefined

Answer: b) false

Question 10: Theoretical
Why is the Map() object often preferred over a standard object for storing key-value pairs?

a) It can only store strings as keys.
b) It performs better in scenarios involving frequent additions and deletions of key-value pairs.
c) It automatically sorts the keys alphabetically.

Answer: b) It performs better in scenarios involving frequent additions and deletions of key-value pairs.




LEVEL4:
JavaScript Quiz: Conditional Statements
Question 1: Practical
What will the following JavaScript code output?


let age = 20;
if (age >= 18) {
    console.log("Adult");
} else {
    console.log("Minor");
}
a) Adult
b) Minor
c) Error

Answer: a) Adult

Question 2: Theoretical
When should conditional statements be used in JavaScript?

a) To repeat a block of code multiple times.
b) To execute a block of code based on a specific condition.
c) To handle errors in code execution.

Answer: b) To execute a block of code based on a specific condition.

Question 3: Practical
What is the output of the following switch statement?


let fruit = 'apple';
switch (fruit) {
    case 'banana':
        console.log('Yellow fruit');
        break;
    case 'apple':
        console.log('Round fruit');
        break;
    default:
        console.log('Unknown fruit');
}
a) Yellow fruit
b) Round fruit
c) Unknown fruit

Answer: b) Round fruit

Question 4: Practical
Consider the following nested if statement. What does it print?


let num = 30;
if (num > 20) {
    if (num < 40) {
        console.log("Number is in the range 21-39");
    } else {
        console.log("Number is 40 or more");
    }
} else {
    console.log("Number is 20 or less");
}
a) Number is in the range 21-39
b) Number is 40 or more
c) Number is 20 or less

Answer: a) Number is in the range 21-39

Question 5: Theoretical
What are the main keywords associated with conditional statements in JavaScript?

a) function, return, value
b) if, else, switch
c) for, while, do

Answer: b) if, else, switch

Question 6: Practical
How does an else if ladder work in JavaScript? What will the following code print?


let score = 75;
if (score >= 90) {
    console.log("Grade A");
} else if (score >= 80) {
    console.log("Grade B");
} else if (score >= 70) {
    console.log("Grade C");
} else {
    console.log("Grade F");
}
a) Grade A
b) Grade B
c) Grade C

Answer: c) Grade C

Question 7: Practical
Which case will the following switch statement default to?


let day = 5;
switch (day) {
    case 1:
        console.log("Monday");
        break;
    case 2:
        console.log("Tuesday");
        break;
    case 3:
        console.log("Wednesday");
        break;
    default:
        console.log("Another day");
}
a) Monday
b) Wednesday
c) Another day

Answer: c) Another day

Question 8: Theoretical
Why might a programmer choose to use a switch statement over multiple if-else statements?

a) To increase the performance of the code.
b) For better readability when dealing with multiple potential conditions.
c) Because switch statements can execute faster than if-else statements in all cases.

Answer: b) For better readability when dealing with multiple potential conditions.

This quiz is structured to solidify the learner's understanding of JavaScript conditional statements, ensuring they can both recognize and effectively implement these crucial constructs in various programming scenarios.











LEVEL5:
JavaScript Quiz: Loops
Question 1: Practical
What will the following JavaScript code output?


for (let i = 0; i < 3; i++) {
    console.log(i);
}
a) 0 1 2
b) 0 1 2 3
c) 1 2 3

Answer: a) 0 1 2

Question 2: Theoretical
Why are loops used in programming?

a) To execute a block of code a limited number of times.
b) To ensure a program uses minimal memory.
c) To execute a block of code multiple times based on a condition or a set of conditions.

Answer: c) To execute a block of code multiple times based on a condition or a set of conditions.

Question 3: Practical
What does the following while loop do?


let x = 5;
while (x > 0) {
    console.log(x);
    x--;
}
a) Prints the numbers from 5 down to 1.
b) Creates an infinite loop.
c) Prints the number 5 five times.

Answer: a) Prints the numbers from 5 down to 1.

Question 4: Practical
Consider the do-while loop below. What is its output?


let count = 0;
do {
    console.log(count);
    count++;
} while (count < 3);
a) 0 1 2
b) 0 1 2 3
c) 1 2 3

Answer: a) 0 1 2

Question 5: Practical
How does the for-in loop work in JavaScript? What will the following code print?


const obj = { a: 1, b: 2, c: 3 };
for (let prop in obj) {
    console.log(prop);
}
a) 1 2 3
b) a b c
c) a:1 b:2 c:3

Answer: b) a b c

Question 6: Practical
What does the for-of loop do with the following code snippet?


const numbers = [1, 2, 3];
for (let number of numbers) {
    console.log(number);
}
a) Prints each element of the numbers array.
b) Prints "numbers" three times.
c) Causes a syntax error because for-of cannot be used with arrays.

Answer: a) Prints each element of the numbers array.

Question 7: Theoretical
What is the key difference between a for-in and a for-of loop in JavaScript?

a) for-in iterates over array indices, whereas for-of iterates over object properties.
b) for-in iterates over object properties, whereas for-of iterates over iterable objects like arrays and strings.
c) There is no difference; they can be used interchangeably.

Answer: b) for-in iterates over object properties, whereas for-of iterates over iterable objects like arrays and strings.

Question 8: Practical
What will the following for-of loop output if executed?


let string = "hello";
for (let char of string) {
    console.log(char);
}
a) h e l l o
b) hello
c) error

Answer: a) h e l l o




LEVEL6:
JavaScript Quiz: Functions
Question 1: Practical
What does the following JavaScript function output?


function sayHello() {
    console.log("Hello!");
}
sayHello();
a) "Hello!"
b) Undefined
c) Nothing, it produces an error

Answer: a) "Hello!"

Question 2: Theoretical
Why are functions important in JavaScript?

a) They allow code to be executed only when called, reducing memory usage.
b) They organize code into reusable pieces, making it more readable and maintainable.
c) They speed up the execution of the program.

Answer: b) They organize code into reusable pieces, making it more readable and maintainable.

Question 3: Practical
How do you call a function with arguments in JavaScript? What will the following function return?


function addNumbers(a, b) {
    return a + b;
}
console.log(addNumbers(5, 10));
a) 5
b) 15
c) "5 + 10"

Answer: b) 15

Question 4: Practical
What will the following function with a conditional statement output if x is 6?


function testNumber(x) {
    if (x > 10) {
        return "Greater than 10";
    } else {
        return "10 or less";
    }
}
console.log(testNumber(6));
a) "Greater than 10"
b) "10 or less"
c) "6"

Answer: b) "10 or less"

Question 5: Practical
Consider a function that contains a loop. What does the following function do?


function countToN(n) {
    for (let i = 1; i <= n; i++) {
        console.log(i);
    }
}
countToN(3);
a) Prints numbers from 1 to 3
b) Prints numbers from 0 to 3
c) Returns the sum of numbers from 1 to 3

Answer: a) Prints numbers from 1 to 3

Question 6: Theoretical
What is recursion in JavaScript?

a) A method to loop through array elements
b) A function that calls itself to solve smaller instances of the same problem
c) A syntax for defining multiple functions at once

Answer: b) A function that calls itself to solve smaller instances of the same problem

Question 7: Practical
Consider the following recursive function. What is its purpose?


function factorial(n) {
    if (n === 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}
console.log(factorial(4));
a) Calculates the sum of numbers up to n
b) Calculates the factorial of n
c) Counts down from n to 1

Answer: b) Calculates the factorial of n

Question 8: Practical
What does the following recursive function output?


function fibonacci(n) {
    if (n < 2) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}
console.log(fibonacci(6));
a) 8
b) 13
c) 21

Answer: a) 8